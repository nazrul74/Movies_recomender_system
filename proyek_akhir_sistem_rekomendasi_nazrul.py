# -*- coding: utf-8 -*-
"""Proyek Akhir - Sistem Rekomendasi - Nazrul.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yXIQoBhMfQOzKPYBiIKfPAPQmYU2RkAj

# Proyek Akhir : Membuat Model Sistem Rekomendasi
Nama: Nazrul Effendy

Data: https://www.kaggle.com/datasets/khusheekapoor/coursera-courses-dataset-2021/data

### Download dataset:
"""

!kaggle datasets download -d khusheekapoor/coursera-courses-dataset-2021

"""## Unzip data coursera-courses-dataset-2021.zip"""

!unzip coursera-courses-dataset-2021.zip

"""### Impor library-library yang diperlukan"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
import re
import nltk
from nltk.stem import WordNetLemmatizer

"""# Data Understanding

### Loading dataset dan menampilkan 5 baris pertama dari dataset tersebut:
"""

# Load the dataset
df = pd.read_csv("Coursera.csv")
df.head()

"""### Mencari ukuran dataset:"""

print("Size of dataset: ", df.shape)

"""### Mencari jumlah baris yang ada duplikasi dengan baris yang lain:"""

print("Number of duplicated rows: ", df.duplicated().sum())

"""### Menampilkan tipe data setiap kolom pada dataset "df":"""

df.info()

"""### Pengecekan jumlah variabel yang bernilai Null"""

df.isnull().sum()

"""### Melihat statistik dataset:"""

df.describe()

"""## Data Preparation

### Menghilangkan baris yang terdapat duplikasi dengan baris lain, kemudian melakukan pengecekan apakah masih ada baris yang merupakan duplikasi dari baris lain:
"""

df.drop_duplicates(inplace=True)
df.duplicated().sum()

"""### Cek nama kolom di dataset 'df'"""

df.columns

"""### Membuat suatu fungsi untuk mengganti nama kolom pada suatu dataset"""

def rename_col(col_name):
    col_name = col_name.split(' ')
    col_name = '_'.join(col_name)
    return col_name

"""### Menampilkan nama kolom sebelum rename, melakukan renama nama kolom dan menampilkan nama kolom setelah rename:"""

print("Columns names before renaming: ", df.columns.to_list())
df.columns = [rename_col(col) for col in df.columns]
print("Columns names after renaming: ", df.columns.to_list())

"""### Feature selection

### Mendefinisikan feature yang dipilih
"""

features_selected = ["Course_Name", "Course_Description", "Skills", "Difficulty_Level"]

"""### membuat dataset baru yang memiliki kolom sesuai feature yang dipilih"""

new_df = df[features_selected]
new_df.head()

"""### Menggabungkan konten semua fitur untuk membentuk satu fitur, menampilkan 5 baris pertama dataset yang sudah diolah tersebut"""

new_df["description_key_words"] = ['' for i in range(new_df.shape[0])]
for col in features_selected:
    new_df["description_key_words"] += [' ' for i in range(new_df.shape[0])] + new_df[col]
new_df.head()

"""### Dataset dibuat supaya hanya memiliki kolom Course_Name dan description_key_words"""

new_df = new_df[["Course_Name", "description_key_words"]]
new_df

"""### Menampilkan isi baris ke 5 dari kolom "description_key_words"
"""

new_df["description_key_words"].iloc[5]

"""## Modeling

### Mendefinisikan my_lematizer dan mendefinisikan fungsi PreprocessText
"""

my_lematizer = WordNetLemmatizer()

def PreprocessText(text):

    cleaned_text = re.sub(r'-',' ',text)

    # remove  urls
    cleaned_text = re.sub(r'https?://\S+|www\.\S+|http?://\S+',' ',cleaned_text)
    # remove html tags
    cleaned_text = re.sub(r'<.*?>',' ',cleaned_text)
    # replace all numbers
    cleaned_text = re.sub(r'[0-9]', '', cleaned_text)
    # filtering out miscellaneous text.
    cleaned_text = re.sub(r"\([^()]*\)", "", cleaned_text)
    # remove mentions
    cleaned_text = re.sub('@\S+', '', cleaned_text)
    # removes ponctuations
    cleaned_text = re.sub('[%s]' % re.escape("""!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~"""), '', cleaned_text)

    cleaned_text = re.sub(r'ML',' Machine Learning ',cleaned_text)

    cleaned_text = re.sub(r'DL',' Deep Learning ',cleaned_text)

    cleaned_text = cleaned_text.lower() #
    cleaned_text = cleaned_text.split()

    # apply lematisation
    cleaned_text = ' '.join([my_lematizer.lemmatize(word) for word in cleaned_text])

    return cleaned_text

"""### Download 'wordnet' dan 'omw-1.4' dari nltk"""

nltk.download('wordnet')
nltk.download('omw-1.4')

"""### Menerapkan pemrosesan teks pada description_key_words dan menampilkan hasilnya pada iloc 5"""

new_df["description_key_words"] = new_df["description_key_words"].apply(PreprocessText)
new_df["description_key_words"].iloc[5]

"""### Vectorization"""

vectorizer = CountVectorizer(max_features=10000, stop_words='english')
vectors = vectorizer.fit_transform(new_df["description_key_words"]).toarray()

"""### Menampilkan bentuk matriks feature dan ukuran kamus"""

print("Shape of feature  matrix: ", vectors.shape)
print("Vocabulary size : ", len(vectorizer.vocabulary_))
#print("The vocabulary: ", vectorizer.vocabulary_)

"""### Membuat fungsi course_id_recommended"""

def course_id_recommended(description, vectorizer, vectors, number_of_recommendation=5):
    # preprocess text
    description = [PreprocessText(description)]

    # do vectorization
    vect = vectorizer.transform(description)

    # compute similarity with other feature vectors
    similars_vectors = cosine_similarity(vect, vectors)[0]

    # We sort the similarity values in ascending order(The result is a list of indices)
    ordered_similars_vectors = list(similars_vectors.argsort())

    # We reverse to order
    reverse_ordered_similars_vectors = [index for index in reversed(ordered_similars_vectors)]

    # We select the number_of_recommendation indices corresponding to the highest similarity coeficients
    best_indexs = reverse_ordered_similars_vectors[1:number_of_recommendation]

    return best_indexs

"""### Membuat fungsi recommend_me"""

def recommend_me(description):
    course_index = course_id_recommended(description, vectorizer, vectors, number_of_recommendation=10)
    if course_index != None:
        course_to_recommend = list(new_df.iloc[course_index]["Course_Name"])
        print("Courses yang direkomendasikan ke user: ")
        print("------------------------------------------------------------------")
        for i, course in enumerate(course_to_recommend):
            print(f"\t{i+1}- {course}")
        print("------------------------------------------------------------------")
    else:
        print("Tidak ada course yang direkomendasikan ke anda")

"""## Evaluasi

### Menampikan top 9 course yang direkomendasikan ke user dari kata kunci "Python programming"
"""

recommend_me("Python programming")